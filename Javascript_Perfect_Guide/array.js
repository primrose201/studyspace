/*
[ 배열 ]

자바스크립트에서 배열은 특별한 형태의 객체이다.
동작원리를 살펴보면 단지 length 프로퍼티를 중심으로 동작하는 객체라는 것을 알 수 있다.

C나 자바의 배열과 같은 기능을 하지만,
크기와 타입을 지정하지 않아도 된다.

배열 객체는 각 인덱스에 값을 그리고 'length 프로퍼티'를 가진다.
자바스크립트 배열의 특징은 인덱스가 꼭 연속적일 필요가 없다는 것이다.
'length 프로퍼티'는 배열의 크기를 나타내며, 배열 객체에서 중요한 역할을 담당하고 있다.
*/


/*
[ 배열과 유사배열 ]
배열은 'length 프로퍼티'를 중심으로 동작한다는 것을 알 수 있다.
그렇다면, 우리는 'length 프로퍼티'를 가지는 배열과 유사하게 동작 가능한 객체를 만들 수 있을 것이다. 이것을 유사배열이라고 한다.

추후 this 바인딩을 공부하며 유사배열의 유용성을 알 수 있다.

 > 배열
 [ 'a', 1, object, 'hello' ]
 length 프로퍼티 : 4

 > 유사배열
 {
    '0' : 'a',
    '1' : 1,
    '2' : object,
    '3' : 'hello',
    length : 4
 }
 또는
 {
    prop1 : 'value1',
    prop2 : 'value2',
    method1 : 'method1',
    length : 0
 }
*/


/*
[ 배열의 생성 ]

1) 리터럴 방식
  var arr = [1, 2, 3, 4, 5];

2) 생성자 방식 - 매개변수 : 숫자 1 개
  var arr = new Array(3);
  => var arr = [undefined, undefined, undefined];

3) 생성자 방식 - 매개변수 : 숫자 외 값 1개 또는 여러개의 값
  var arr = new Array(1, 2, 3);
  => var arr = [1, 2, 3];
 */


/*
[ 배열의 요소추가 ]
var arr = [1, 2, 3]
arr.length : 3
arr[10] = 1;

=> arr = [1, 2, 3, undefined x 7, 1],
   arr.length : 11
   length 값이 자동으로 변경됨을 알 수 있다.
   하지만 실제 메모리를 원소 11개 크기만큼 가지지는 않는다.

대표적인 메소드 : push(), splice()
- push(원소)
배열의 마지막에 원소를 추가하고 length 프로퍼티를 반환다. length 프로퍼티는 자동으로 +1 이 된다.
arr = [1, 2, 3];
arr.push('hello');
=> arr = [1, 2, 3, 'hello']
*/


/*
[ 배열의 요소삭제 ]

배열또한 객체이기 때문에
객체의 프로퍼티를 삭제하는 연산자인 delete 연산자를 이용할 수 있다.
하지만 이 경우 length 프로퍼티의 변경이 이루어지지 않아 추후 배열이 정상적으로 동작하지 않을 수 있다.
delete arr[1];

대표적인 메소드 : pop(), splice()
- pop()
배열의 마지막 원소를 삭제하며 해당 값을 반환한다. length 프로퍼티는 자동으로 -1 이 된다.
arr = [1, 2, 3];
result = arr.pop();
=> arr = [1, 2], result = 3
*/


/*
[ 배열의 요소 추가삭제 범용 메소드 ]

splice(start, deleteCount, item ...)
  start: 시작할 위치 (인덱스 값)
  deleteCount: 시작할 위치로부터 삭제할 개수
  item: 삭제한 위치에 추가할 요소

추가 또는 삭제작업을 하고 배열을 반환한다.
arr = [1, 2, 3, 4];
arr.splice(1, 2, 'a, 'b', 'c');
=> arr = [1, 'a', 'b', 'c', 4]
*/